#!/usr/bin/env python3

import subprocess
import argparse
import os
from zipfile import ZipFile
from datetime import date

"""
Build the parser and all arguments associated with it.
"""

# Initialize the parser
parser = argparse.ArgumentParser(description="""
Create a .zip with all files and layers to be used for AWS Lambda Layers for python
3.8 and 3.9 functions.

This same program is used to run the Docker container "personamsolis/layermaker", 
and to generate and run the .zip.

Exit Codes:
  * 67 - Directory did not exist
""")

# Add output argument
parser.add_argument('-o', metavar='output', type=str, required=True,
                    help='Local path to save zipped layer')

# Add python version arguments
parser.add_argument('-v', metavar='version', type=str, required=True,
                    choices=["3.8", "3.9"],
                    help=r'Specify the version of python to use (3.8, 3.9)')

# Add install packages argument
parser.add_argument('-i', metavar='install', type=str, required=True,
                    help=r'What packages to install (use quotes for multiple)')

# Add name argument
parser.add_argument('-n', metavar='name', type=str, required=True,
                    help=r'Unique name for saved layer zip file (No white space)')

# Add switch for container
parser.add_argument('-c', metavar='container', action='store_true', required=False,
                    help='If this flag is set, then program will run in container')

# Execute method
args = parser.parse_args()

"""
Create the directory Exception
"""


class DirectoryException(Exception):
    # Constructor or Initializer
    def __init__(self, value):
        self.value = value

    # __str__ is to print() the value
    def __str__(self):
        return repr(self.value)


"""
MAIN PROGRAM
"""


def check_dir(directory):
    """
    Check if the directories given exist
    :param directory: User or system defined directory.
    :return: nothing. Just quit if there is an error
    """
    try:
        if not os.path.exists(directory):
            raise(DirectoryException("Directory {} does not exist".format(directory)))
    except DirectoryException:
        exit(67)


def create_zip(directory, zipname):
    """
    Create a zip file in the specified directory.
    :param directory: User or system defined directory.
    :param zipname: User defined layer name
    :return:
    """
    check_dir(directory)
    datestamp = date.today().strftime(r'%Y%m%d')

    # Create the zip from a directory
    with ZipFile('{}_{}.zip'.format(zipname, datestamp), 'w') as zipObj:
        # Iterate over all files in the dir
        for folderName, subfolders, filenames in os.walk(directory):
            for filename in filenames:
                # Create complete filepath for file in directory
                filepath = os.path.join(folderName, filename)
                # Add file to zip
                zipObj.write(filepath, os.path.basename(filepath))


"""
Unit Test
"""

if __name__ == '__main__':
    pass
