#!/usr/bin/env python3
import logging
import subprocess
import argparse
import os
from zipfile import ZipFile
from datetime import date
from sys import stdout

"""
Build the parser and all arguments associated with it.
"""

# Initialize the parser
parser = argparse.ArgumentParser(description="""
Create a .zip with all files and layers to be used for AWS Lambda Layers for python
3.8 and 3.9 functions.

This same program is used to run the Docker container "personamsolis/layermaker", 
and to generate and run the .zip.

Exit Codes:
  * 67 - Directory did not exist
""")

# Add output argument
parser.add_argument('-o', '--output', type=str, required=False, default=os.getcwd(),
                    help='Local path to save zipped layer')

# Add python version arguments
parser.add_argument('-p', '--python', type=str, required=True, choices=["3.8", "3.9"],
                    help=r'Specify the version of python to use (3.8, 3.9)')

# Add install packages argument
parser.add_argument('-i', '--install', type=str, required=True,
                    help=r'What packages to install (use quotes for multiple)')

# Add zip file name argument
parser.add_argument('-n', '--name', type=str, required=True,
                    help=r'Unique name for saved layer zip file (No white space)')

# Add switch for container. Default to false
parser.add_argument('-c', '--container', action='store_true', required=False,
                    help='If this flag is set, then program will run in container')

# Add verbose argument. Default to false
parser.add_argument('-v', '--verbose', action='store_true', required=False,
                    help='Turn on verbose for debugging')

# Execute method
args = parser.parse_args()

"""
Create the directory Exception
"""


class DirectoryException(Exception):
    # Constructor or Initializer
    def __init__(self, value):
        self.value = value

    # __str__ is to print() the value
    def __str__(self):
        return repr(self.value)


"""
MAIN PROGRAM
"""
datestamp = date.today().strftime(r'%Y%m%d')
zipname = '{}_{}.zip'.format(args.name, datestamp)
fulldirpath = os.path.join(os.path.abspath(args.output), zipname)


def check_dir(directory):
    """
    Check if the directories given exist
    :param directory: User or system defined directory.
    :return: nothing. Just quit if there is an error
    """
    try:
        if not os.path.exists(directory):
            raise(DirectoryException("Directory {} does not exist".format(directory)))
    except DirectoryException:
        exit(67)


def create_zip(directory):
    """
    Create a zip file in the specified directory.
    :param directory: User or system defined directory.
    :return:
    """
    check_dir('/tmp')
    check_dir(directory)

    # Create the zip from a directory
    with ZipFile(zipname, 'w') as zipObj:
        # Iterate over all files in the dir
        for folderName, subfolders, filenames in os.walk(directory):
            for filename in filenames:
                # Create complete filepath for file in directory
                filepath = os.path.join(folderName, filename)
                # Add file to zip
                zipObj.write(filepath, os.path.basename(filepath))


def build_layer(version, packages):
    """
    Install the packages locally in the container within the appropriate dir.
    :param version: User defined python version
    :param packages: User defined packages to install
    :return: Nothing. Just install packages.
    """
    # Create Dir
    layerdir = '/tmp/layer/python/lib/{}/site-packages'.format(version)
    os.mkdir(layerdir)
    check_dir(layerdir)

    # Install packages
    subprocess.run(['pip3', 'install', packages, '-t', layerdir],
                   stdout=subprocess.DEVNULL)

    # Create ZIP
    create_zip('/tmp/layer/python')


def docker_start():
    """
    Runs the Docker container with all of the arguments given
    :return: Nothing. Just run the container
    """
    dockerrun = """"
    docker container run -d --rm -n layermaker
    personamsolis/layermaker:latest
    """
    dockerexec = """
    docker container exec layermaker /tmp/lambda-layer
    """
    dockercopy = """
    docker container cp
    """

    # Start the docker container
    subprocess.run(dockerrun.split(), stdout=subprocess.DEVNULL)

    # Run the program to create the lambda-layer
    subprocess.run([dockerexec.split(), '-c', '-i', args.install, '-n',
                    args.name, '-p', args.python], stdout=subprocess.DEVNULL)

    # Copy the zip to the specified directory
    subprocess.run([dockercopy.split(), 'layermaker:/tmp/{}'.format(zipname),
                    fulldirpath], stdout=subprocess.DEVNULL)

    # Stop the docker container
    subprocess.run(['docker', 'container', 'stop', 'layermaker'],
                   stdout=subprocess.DEVNULL)


"""
Run program
"""

if __name__ == '__main__':

    # Turn on verbose if specified
    if args.verbose:
        logging.basicConfig(stream=stdout, level=logging.INFO)

    # If the program is running on a container then build the layer, otherwise
    # start the docker container
    if args.container:

        build_layer(args.python, args.install)

    else:

        docker_start()
